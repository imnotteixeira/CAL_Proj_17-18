kmpPrefix(P):
    prefix ← {}
    prefix[1] ← 0
    k ← 0
    
    for i ← 2 to length(P) do:
        while (k>0 and P[k+1] != P[i] do:
            k ← prefix[k]
        if P[k+1] == P[i] then:
            k ← k + 1
        prefix[i] ← k
        
    return prefix
    

kmpMatcher(T, P):      // Assumindo |P| < |T| !!
    prefix ← kmpPrefix(P)
    matchesCounter ← 0
    k ← 0
    
    for i ← 1 to length(T) do:
        while (k>0 and P[k+1] != T[i] do:
            k ← prefix[k]
        if P[k+1] == T[i] then:
            k ← k + 1
        if (k == m) then:
            matchesCounter ← matchesCounter + 1

    return matchesCounter
